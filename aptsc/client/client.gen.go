// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// Defines values for HealthCheckGpuAvailabilityCheck.
const (
	Gpudevice         HealthCheckGpuAvailabilityCheck = "gpudevice"
	Gpuecc            HealthCheckGpuAvailabilityCheck = "gpuecc"
	Gpupcie           HealthCheckGpuAvailabilityCheck = "gpupcie"
	Gpuprocessresidue HealthCheckGpuAvailabilityCheck = "gpuprocessresidue"
	Gpuresidue        HealthCheckGpuAvailabilityCheck = "gpuresidue"
	Gpustatus         HealthCheckGpuAvailabilityCheck = "gpustatus"
)

// Defines values for HealthCheckGpuConsistencyCheck.
const (
	Gpudriver      HealthCheckGpuConsistencyCheck = "gpudriver"
	Gpuharddropnum HealthCheckGpuConsistencyCheck = "gpuharddropnum"
	Gpulinkspeed   HealthCheckGpuConsistencyCheck = "gpulinkspeed"
	Gpusoftdropnum HealthCheckGpuConsistencyCheck = "gpusoftdropnum"
	Gputopo        HealthCheckGpuConsistencyCheck = "gputopo"
)

// Defines values for HealthCheckRdmaConsistencyCheck.
const (
	Rdmamtu      HealthCheckRdmaConsistencyCheck = "rdmamtu"
	Rdmaparaver  HealthCheckRdmaConsistencyCheck = "rdmaparaver"
	Rdmaportnum  HealthCheckRdmaConsistencyCheck = "rdmaportnum"
	Rdmaresource HealthCheckRdmaConsistencyCheck = "rdmaresource"
	Rdmastorever HealthCheckRdmaConsistencyCheck = "rdmastorever"
)

// CCLInspectionOutput defines model for CCLInspection.Output.
type CCLInspectionOutput struct {
	DiagExecErrmsg string `json:"diag_exec_errmsg"`
	DiagFailCount  uint32 `json:"diag_fail_count"`
	GpuUUID        string `json:"gpuUUID"`
	NodeName       string `json:"node_name"`
	Result         string `json:"result"`
	Vendor         string `json:"vendor"`
}

// CCLInspectionRequest defines model for CCLInspection.Request.
type CCLInspectionRequest struct {
	CclType     string   `json:"cclType"`
	Command     string   `json:"command"`
	GpuPerNode  uint32   `json:"gpuPerNode"`
	InAlgbw     uint32   `json:"inAlgbw"`
	InBusbw     uint32   `json:"inBusbw"`
	InspectType string   `json:"inspectType"`
	NodeList    []string `json:"nodeList"`
	OutAlgbw    uint32   `json:"outAlgbw"`
	OutBusbw    uint32   `json:"outBusbw"`
	TestScene   string   `json:"testScene"`
}

// CCLInspectionResponse defines model for CCLInspection.Response.
type CCLInspectionResponse struct {
	DiagCreated       string                         `json:"diag_created"`
	DiagGpuOutputs    []CCLInspectionOutput          `json:"diag_gpu_outputs"`
	DiagTotalCount    uint32                         `json:"diag_total_count"`
	InspectType       string                         `json:"inspect_type"`
	Status            string                         `json:"status"`
	TaskResultSummary CCLInspectionTaskResultSummary `json:"task_result_summary"`
}

// CCLInspectionTaskResultSummary defines model for CCLInspection.TaskResultSummary.
type CCLInspectionTaskResultSummary struct {
	TotalCards  uint32 `json:"totalCards"`
	TotalChecks uint32 `json:"totalChecks"`
	TotalUsed   uint32 `json:"totalUsed"`
}

// HealthCheckConfig defines model for HealthCheck.Config.
type HealthCheckConfig struct {
	GpuNums   uint32  `json:"gpuNums"`
	ParaNums  *uint32 `json:"paraNums,omitempty"`
	RdmaNums  uint32  `json:"rdmaNums"`
	StoreNums *uint32 `json:"storeNums,omitempty"`
}

// HealthCheckGpuAvailabilityCheck defines model for HealthCheck.GpuAvailabilityCheck.
type HealthCheckGpuAvailabilityCheck string

// HealthCheckGpuConsistencyCheck defines model for HealthCheck.GpuConsistencyCheck.
type HealthCheckGpuConsistencyCheck string

// HealthCheckItem defines model for HealthCheck.Item.
type HealthCheckItem struct {
	GpuAvailabilityCheck  []HealthCheckGpuAvailabilityCheck `json:"gpuAvailabilityCheck"`
	GpuConsistencyCheck   []HealthCheckGpuConsistencyCheck  `json:"gpuConsistencyCheck"`
	RdmaAvailabilityCheck []HealthCheckGpuAvailabilityCheck `json:"rdmaAvailabilityCheck"`
	RdmaConsistencyCheck  []HealthCheckRdmaConsistencyCheck `json:"rdmaConsistencyCheck"`
	ServerVerCheck        []string                          `json:"serverVerCheck"`
}

// HealthCheckRdmaConsistencyCheck defines model for HealthCheck.RdmaConsistencyCheck.
type HealthCheckRdmaConsistencyCheck string

// HealthCheckRequest defines model for HealthCheck.Request.
type HealthCheckRequest struct {
	CheckSubInfo   HealthCheckItem   `json:"checkSubInfo"`
	HealthCheckCfg HealthCheckConfig `json:"healthCheckCfg"`
	Object         string            `json:"object"`
}

// HealthCheckResponse defines model for HealthCheck.Response.
type HealthCheckResponse struct {
	EndTime   string              `json:"endTime"`
	GpuNum    uint32              `json:"gpuNum"`
	NodeNum   uint32              `json:"nodeNum"`
	ParaNum   *uint32             `json:"paraNum,omitempty"`
	Result    []HealthCheckResult `json:"result"`
	StartTime string              `json:"startTime"`
	Status    string              `json:"status"`
	StoreNum  *uint32             `json:"storeNum,omitempty"`
	Vendor    string              `json:"vendor"`
}

// HealthCheckResult defines model for HealthCheck.Result.
type HealthCheckResult struct {
	CheckDetail   string   `json:"checkDetail"`
	CheckDetailEn string   `json:"checkDetailEn"`
	CheckSubItem  string   `json:"checkSubItem"`
	CheckType     string   `json:"checkType"`
	EndTime       string   `json:"endTime"`
	Object        string   `json:"object"`
	ObjectId      []string `json:"objectId"`
	ShowDetail    bool     `json:"showDetail"`
	StartTime     string   `json:"startTime"`
	Status        string   `json:"status"`
	SubResult     string   `json:"subResult"`
}

// HealthCheckCreateJSONRequestBody defines body for HealthCheckCreate for application/json ContentType.
type HealthCheckCreateJSONRequestBody = HealthCheckRequest

// CCLInspectionCreateJSONRequestBody defines body for CCLInspectionCreate for application/json ContentType.
type CCLInspectionCreateJSONRequestBody = CCLInspectionRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// HealthCheckGet request
	HealthCheckGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealthCheckCreateWithBody request with any body
	HealthCheckCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HealthCheckCreate(ctx context.Context, body HealthCheckCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CCLInspectionGet request
	CCLInspectionGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CCLInspectionCreateWithBody request with any body
	CCLInspectionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CCLInspectionCreate(ctx context.Context, body CCLInspectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) HealthCheckGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthCheckGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthCheckCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthCheckCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthCheckCreate(ctx context.Context, body HealthCheckCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthCheckCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CCLInspectionGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCCLInspectionGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CCLInspectionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCCLInspectionCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CCLInspectionCreate(ctx context.Context, body CCLInspectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCCLInspectionCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewHealthCheckGetRequest generates requests for HealthCheckGet
func NewHealthCheckGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/opapi/wsm/v1/apts/healthcheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHealthCheckCreateRequest calls the generic HealthCheckCreate builder with application/json body
func NewHealthCheckCreateRequest(server string, body HealthCheckCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHealthCheckCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewHealthCheckCreateRequestWithBody generates requests for HealthCheckCreate with any type of body
func NewHealthCheckCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/opapi/wsm/v1/apts/healthcheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCCLInspectionGetRequest generates requests for CCLInspectionGet
func NewCCLInspectionGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/opapi/wsm/v1/apts/scclinspection/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCCLInspectionCreateRequest calls the generic CCLInspectionCreate builder with application/json body
func NewCCLInspectionCreateRequest(server string, body CCLInspectionCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCCLInspectionCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCCLInspectionCreateRequestWithBody generates requests for CCLInspectionCreate with any type of body
func NewCCLInspectionCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/opapi/wsm/v1/apts/scclinspection/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// HealthCheckGetWithResponse request
	HealthCheckGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckGetResponse, error)

	// HealthCheckCreateWithBodyWithResponse request with any body
	HealthCheckCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HealthCheckCreateResponse, error)

	HealthCheckCreateWithResponse(ctx context.Context, body HealthCheckCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*HealthCheckCreateResponse, error)

	// CCLInspectionGetWithResponse request
	CCLInspectionGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CCLInspectionGetResponse, error)

	// CCLInspectionCreateWithBodyWithResponse request with any body
	CCLInspectionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CCLInspectionCreateResponse, error)

	CCLInspectionCreateWithResponse(ctx context.Context, body CCLInspectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CCLInspectionCreateResponse, error)
}

type HealthCheckGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthCheckResponse
}

// Status returns HTTPResponse.Status
func (r HealthCheckGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthCheckGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthCheckCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HealthCheckCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthCheckCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CCLInspectionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CCLInspectionResponse
}

// Status returns HTTPResponse.Status
func (r CCLInspectionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CCLInspectionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CCLInspectionCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CCLInspectionCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CCLInspectionCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HealthCheckGetWithResponse request returning *HealthCheckGetResponse
func (c *ClientWithResponses) HealthCheckGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckGetResponse, error) {
	rsp, err := c.HealthCheckGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthCheckGetResponse(rsp)
}

// HealthCheckCreateWithBodyWithResponse request with arbitrary body returning *HealthCheckCreateResponse
func (c *ClientWithResponses) HealthCheckCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HealthCheckCreateResponse, error) {
	rsp, err := c.HealthCheckCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthCheckCreateResponse(rsp)
}

func (c *ClientWithResponses) HealthCheckCreateWithResponse(ctx context.Context, body HealthCheckCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*HealthCheckCreateResponse, error) {
	rsp, err := c.HealthCheckCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthCheckCreateResponse(rsp)
}

// CCLInspectionGetWithResponse request returning *CCLInspectionGetResponse
func (c *ClientWithResponses) CCLInspectionGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CCLInspectionGetResponse, error) {
	rsp, err := c.CCLInspectionGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCCLInspectionGetResponse(rsp)
}

// CCLInspectionCreateWithBodyWithResponse request with arbitrary body returning *CCLInspectionCreateResponse
func (c *ClientWithResponses) CCLInspectionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CCLInspectionCreateResponse, error) {
	rsp, err := c.CCLInspectionCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCCLInspectionCreateResponse(rsp)
}

func (c *ClientWithResponses) CCLInspectionCreateWithResponse(ctx context.Context, body CCLInspectionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CCLInspectionCreateResponse, error) {
	rsp, err := c.CCLInspectionCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCCLInspectionCreateResponse(rsp)
}

// ParseHealthCheckGetResponse parses an HTTP response from a HealthCheckGetWithResponse call
func ParseHealthCheckGetResponse(rsp *http.Response) (*HealthCheckGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthCheckGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthCheckResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHealthCheckCreateResponse parses an HTTP response from a HealthCheckCreateWithResponse call
func ParseHealthCheckCreateResponse(rsp *http.Response) (*HealthCheckCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthCheckCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCCLInspectionGetResponse parses an HTTP response from a CCLInspectionGetWithResponse call
func ParseCCLInspectionGetResponse(rsp *http.Response) (*CCLInspectionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CCLInspectionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CCLInspectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCCLInspectionCreateResponse parses an HTTP response from a CCLInspectionCreateWithResponse call
func ParseCCLInspectionCreateResponse(rsp *http.Response) (*CCLInspectionCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CCLInspectionCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
